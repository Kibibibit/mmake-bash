#!/bin/bash






### Use colour echo if it exists
COL=false

if [[ "$PATH" == *"/colour-echo"* ]]
then
  COL=true
fi

doEcho() {
  c=$1
  shift 1
  if [ "$COL" = true ]
  then
    cecho -f $c "$@"
  else
    echo -e "$@"
  fi
}


usage() {
  doEcho orange "Usage:"
  doEcho white "  $0 <args>"
  echo
  doEcho cyan "Options:"
  doEcho orange    "  -h              : Shows this help message"
  doEcho blue "  -n/--name       : Sets the name of the created executable. Defaults to 'main'"
  doEcho blue "  -f/--cflag      : Adds the given cflag to the Makefile. Exclude the '-'"
  doEcho blue "  -l/--lib        : Adds the given library to the Makefile. Exclude the '-l'"
  doEcho blue "  -c/--compiler   : Sets the compiler version. Defaults to g++ for c++ and gcc for c"
  doEcho blue "  -v/--version    : Sets the c++ version passed in through -std=, for c++ projects. Defaults to c++14"
  doEcho darkblue      "  --remove-cflag  : Removes the given cflag from the Makefile. Exclude the leading '-'"
  doEcho darkblue      "  --remove-lib    : Removes the given library from the Makefile. Exclude the leading '-l'"
  echo
  exit

}


#### Make sure mmake is on path
dir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

if [[ ! "$PATH" == *"$dir"* ]]
then
  doEcho red "mmake is not in your path! make sure to add $dir to your path"
  exit
fi

#### Look to see if any c or cpp files exist
currentDir=`pwd`

foundCpp=false
foundC=false
projectType=none
ext=none

for file in "$currentDir"/*
do
  if [[ $file == *.cpp ]]
  then
    foundCpp=true
  fi

  if [[ $file == *.c ]]
  then
    foundC=true
  fi
done

if [ "$foundC" = false ] && [ "$foundCpp" = false ]
then
  doEcho red "No c or cpp project found!"
  exit 1
fi

if [ "$foundC" = true ] && [ "$foundCpp" = false ]
then
  doEcho lightblue "This is a C Project"
  projectType=c
  ext=c
fi

if [ "$foundC" = false ] && [ "$foundCpp" = true ]
then
  doEcho cyan "This is a C++ Project"
  projectType=cpp
  ext=cpp
fi

if [ "$projectType" == "none" ]
then
  doEcho red "mmake does not currently support using c and cpp files in the same project."
  exit 2
fi

#### Helper function defs

writeLine() {
  echo -e "$1" >> $2
}

newLine() {
  echo "" >> $1
}

#### Generate defaults.conf if does not exist

DEF=$dir/defaults.conf
if ! test -f "$DEF"
then
  doEcho orange "$DEF does not exists, generating: "
  touch $DEF
  writeLine "# Autogenerated default conf file! Anything in here will be added by default to mmake.conf files" $DEF
  writeLine default-name=main $DEF
  writeLine default-cpp-version=c++14 $DEF
  writeLine default-cpp-compiler=g++ $DEF
  writeLine default-c-compiler=gcc $DEF
  writeLine default-cflags=Wall,Werror $DEF
  doEcho green "Done!"
fi

#### Load in defaults from defaults.conf

declare -A defaults

while IFS= read -r line; do
  key=
  value=
  if [[ ! $line = \#* ]] 
  then
    IFS='=' read -ra arr <<< "$line"
    key=${arr[0]}
    value=${arr[1]}
    defaults[$key]=$value
  fi
done < $DEF

NAME=${defaults[default-name]}
CFLAGS=${defaults[default-cflags]}
COMPILER=""
VERSION=""
LIBS=""

if [ "$projectType" == "cpp" ]
then
  COMPILER=${defaults[default-cpp-compiler]}
else
  COMPILER=${defaults[default-c-compiler]}
fi

VERSION=${defaults[default-cpp-version]}


#### Take in arguments

setCompiler=false
setVersion=false
setName=false
addedFlags=false
addedLibs=false

declare -A removeFlags
declare -A removeLibs

while [ ! -z "$1" ]
do
  case "$1" in
    -h)
      usage
      exit 3
      ;;
    ## Add the given cflag
    -f | --cflag) 
      if [ -z "$2" ] || [[ $2 == -* ]]
      then
        doEcho red "f/cflag requires an argument!"
        exit 4
      fi

      if [ -z "$CFLAGS" ]
      then
        CFLAGS="$2"
      else
        CFLAGS="$CFLAGS,$2"
      fi
      addedFlags=true
      shift 2
      ;;
    ## Add the given dependency
    -l | --lib) 
      if [ -z "$2" ] || [[ $2 == -* ]]
      then
        doEcho red "l/lib requires an argument!"
        exit 4
      fi
      if [ -z "$LIBS" ]
      then
        LIBS="$2"
      else
        LIBS="$LIBS,$2"
      fi
      addedLibs=true
      shift 2
      ;;
    ## Set the compiler
    -c | --compiler)
      if [ -z "$2" ] || [[ $2 == -* ]]
      then
        doEcho red "c/compiler requires an argument!"
        exit 4
      fi
      COMPILER="$2"
      setCompiler=true
      shift 2
      ;;
    ## Set the c++ version
    -v | --version ) 
      if [ -z "$2" ] || [[ $2 == -* ]]
      then
        doEcho red "v/version requires an argument!"
        exit 4
      fi
      VERSION="$2"
      if [ "$projectType" == "c" ]
      then
        doEcho yellow "This is a c project so version will be ignored"
      fi
      setVersion=true
      shift 2 
      ;;
    ## Set the project name
    -n | --name )
      if [ -z "$2" ] || [[ $2 == -* ]]
      then
        doEcho red "n/name requires an argument!"
        exit 4
      fi
      NAME="$2"
      setName=true
      shift 2
      ;;
    --remove-cflag)
      if [ -z "$2" ] || [[ $2 == -* ]]
      then
        doEcho red "remove-cflag requires an argument!"
        exit 4
      fi
      removeFlags[${#removeFlags[@]}]="$2"
      shift 2
      ;;
    --remove-lib)
      if [ -z "$2" ] || [[ $2 == -* ]]
      then
        doEcho red "remove-lib requires an argument!"
        exit 4
      fi
      removeLibs[${#removeLibs[@]}]="$2"
      shift 2
      ;;
    -- ) shift; break ;;
    * ) usage exit 3 break ;;
  esac
done

#### Check if mmake file is already there

MMAKE=$currentDir/mmake.conf
exists=true

if ! test -f "$MMAKE"
then
  doEcho orange "No mmake.conf found! Generating!"
  touch $MMAKE
  writeLine "# Autogenerated mmake.conf! Settings here are used to create your Makefile" $MMAKE
  exists=false
fi

declare -A mmakeconf

if [ "$exists" = true ]
then
  
  while IFS= read -r line; do
    key=
    value=
    if [[ ! $line = \#* ]] 
    then
      IFS='=' read -ra arr <<< "$line"
      key=${arr[0]}
      value=${arr[1]}
      mmakeconf[$key]=$value
    fi
  done < $MMAKE
fi

if [ "$setName" = false ] && [ ! -z "${mmakeconf[name]}" ]
then
  NAME=${mmakeconf[name]}
fi

if [ ! -z "${mmakeconf[cflags]}" ]
then
  if [ "$addedFlags" = false ]
  then
    CFLAGS=${mmakeconf[cflags]}
  else
    CFLAGS=$CFLAGS,${mmakeconf[cflags]}
  fi
fi

if [ ! -z "${mmakeconf[libs]}" ]
then
  if [ "$addedLibs" = false ]
  then
    LIBS=${mmakeconf[libs]}
  else
    LIBS=$LIBS,${mmakeconf[libs]}
  fi
fi

if [ "$setCompiler" = false ] && [ ! -z "${mmakeconf[compiler]}" ]
then
  COMPILER=${mmakeconf[compiler]}
fi

if [ "$setVersion" = false ] && [ ! -z "${mmakeconf[version]}" ]
then
  VERSION=${mmakeconf[cpp-version]}
fi

#### Remove duplicate libs and flags
declare -A flagDupe
IFS=',' read -ra cflagDupeArr <<< "$CFLAGS"

declare -A libDupe
IFS=',' read -ra libDupeArr <<< "$LIBS"


for item in ${cflagDupeArr[@]}
do
  if [[ ! " ${flagDupe[*]} " =~ " ${item} " ]] && [[ ! " ${removeFlags[*]} " =~ " ${item} " ]]; then
    flagDupe[${#flagDupe[@]}]=$item
  fi
done

for item in ${libDupeArr[@]}
do
  if [[ ! " ${libDupe[*]} " =~ " ${item} " ]] && [[ ! " ${removeLibs[*]} " =~ " ${item} " ]]; then
    libDupe[${#libDupe[@]}]=$item
  fi
done

CFLAGS=""
for flag in ${flagDupe[@]}
do
  if [ -z "$CFLAGS" ]
  then
    CFLAGS=$flag
  else
    CFLAGS="$CFLAGS,$flag"
  fi
done

LIBS=""
for lib in ${libDupe[@]}
do
  if [ -z "$LIBS" ]
  then
    LIBS=$lib
  else
    LIBS="$LIBS,$lib"
  fi
done






#### Remake mmake.conf and write settings to it

rm $MMAKE
touch $MMAKE
writeLine "# Autogenerated mmake.conf! Settings here are used to create your Makefile" $MMAKE
writeLine name=$NAME $MMAKE
if [ "$projectType" = "cpp" ]
then
  writeLine version=$VERSION $MMAKE
fi
writeLine compiler=$COMPILER $MMAKE
writeLine cflags=$CFLAGS $MMAKE
writeLine libs=$LIBS $MMAKE



#### Actually generate the Makefile

Makefile=$currentDir/Makefile

if test -f "$Makefile"
then
  rm $Makefile
fi

touch $Makefile
writeLine "# Autogenerated Makefile from mmake!" $Makefile

writeLine "CC=$COMPILER" $Makefile

FLAGS=""

IFS=',' read -ra flagarr <<< "$CFLAGS"
for flag in ${flagarr[@]}
do
  if [ -z "$FLAGS" ]
  then
    FLAGS="-$flag"
  else
    FLAGS="$FLAGS -$flag"
  fi
done

VERSIONFLAG="-std=$VERSION"

### IF c++, add the std=$VERSION flag
if [ "$projectType" == "cpp" ]
then
  if [ -z "$FLAGS" ]
  then
    FLAGS="$VERSIONFLAG"
  else
    FLAGS="$FLAGS $VERSIONFLAG"
  fi
fi

ADDLIBS=""

IFS=',' read -ra libarr <<< "$LIBS"
for lib in ${libarr[@]}
do
  if [ -z "$ADDLIBS" ]
  then
    ADDLIBS="-l$lib"
  else
    ADDLIBS="$ADDLIBS -l$lib"
  fi
done


writeLine "CFLAGS=$FLAGS -g -O" $Makefile
writeLine "LIBS=$ADDLIBS" $Makefile
newLine $Makefile
writeLine ".default: all" $Makefile
newLine $Makefile
writeLine "all: $NAME" $Makefile
newLine $Makefile
writeLine "clean:" $Makefile
writeLine "\trm -rf $NAME *.o" $Makefile
newLine $Makefile


FILES=""

for file in "$currentDir"/*
do
  O=
  if [[ $file == *.cpp ]]
  then
    O=`basename $file .cpp`
  elif [[ $file == *.c ]]
  then
    O=`basename $file .c`
  fi
  
  if [ ! -z "$O" ]
  then
    if [ -z "$FILES" ]
    then
      FILES="$O.o"
    else
      FILES="$FILES $O.o"
    fi
  fi
done


writeLine "$NAME: $FILES" $Makefile
writeLine "\t\$(CC) \$(CFLAGS) -o \$@ \$^ \$(LIBS)" $Makefile
newLine $Makefile
writeLine "%.o: %.$ext" $Makefile
writeLine "\t\$(CC) \$(CFLAGS) -c \$^ \$(LIBS)" $Makefile

doEcho green "Done!"